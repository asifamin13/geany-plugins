#!/usr/bin/env python3

# this is used to generate ignore style mapping header file from SciLexer.h

import os
import sys
import subprocess
import argparse

header_template = """

#ifndef __BRACKETCOLORS_IGNORE_STYLES_H__
#define __BRACKETCOLORS_IGNORE_STYLES_H__

#include <map>
#include <set>
#include <glib.h>
#include "SciLexer.h"

// autogenerated from generate_ignore_styles.py

static const std::map<gint, std::set<guint> > sGeneratedIgnoreStyles {{ {0}
}};

#endif

"""

def parse_file(sci_file):
    """ get macro to value mapping """
    linesRaw = list()
    with open(sci_file, 'r') as f:
        linesRaw = f.readlines()
    macros = dict()
    for line in linesRaw:
        if line.startswith("#define"):
            tks = line.split()
            if len(tks) == 3:
                macros[tks[1]] = tks[2]
    return macros

def make_header_str(ignoreMappingStyles):
    """ make header file from template """
    mappingStr = str()
    for lexID, styleList in sorted(ignoreMappingStyles.items()):
        styleListCstr = str(styleList)
        styleListCstr = styleListCstr.replace('[', '{ ')
        styleListCstr = styleListCstr.replace(']', ' }')
        styleListCstr = styleListCstr.replace("'", '')
        entry = "\n\t{{ {0}, {1} }},".format(lexID, styleListCstr)
        mappingStr += entry
    mappingStr = mappingStr[:-1] # remove last comma
    return header_template.format(mappingStr)

def make_style_mapping(macros, filters):
    """ parse macros into style dict """
    # for keys that dont follow pattern.
    # Found from looking at scintilla/lexers/Lex*.cxx
    # TODO: automate this somehow?
    keyAdjustment = {
        'SCLEX_PYTHON': 'P',
        'SCLEX_CPP': 'C',
        'SCLEX_PERL': 'PL',
        'SCLEX_VB': 'B',
        'SCLEX_MAKEFILE': 'MAKE',
        'SCLEX_BATCH': 'BAT',
        'SCLEX_LATEX': 'L',
        'SCLEX_PASCAL': 'PAS',
        'SCLEX_RUBY': 'RB',
        'SCLEX_FORTRAN': 'F',
        'SCLEX_F77': 'F',
        'SCLEX_VERILOG': 'V',
        'SCLEX_BASH': 'SH',
        'SCLEX_HASKELL': 'HA',
        'SCLEX_SMALLTALK': 'ST',
        'SCLEX_COBOL': 'C'
    }

    fileTypes = [ x for x in macros.keys() if x.startswith("SCLEX") ]
    lexerBracketIgnoreStyles = dict()
    for fileType in fileTypes:
        key = fileType.split('_')[1]
        if fileType in keyAdjustment.keys():
            #print("adjusting key {} to {}".format(key, keyAdjustment[fileType]))
            key = keyAdjustment[fileType]
        keyPrefix = "SCE_{}_".format(key)
        styleKeysAll = [
            x for x in macros.keys() if x.startswith(keyPrefix)
        ]
        styleKeysFiltered = list()
        for styleKey in styleKeysAll:
            include = True
            for filt in filters:
                if filt in styleKey:
                    include = False
                    break
            if include:
                styleKeysFiltered.append(styleKey)
        if len(styleKeysFiltered):
            lexerBracketIgnoreStyles[fileType] = styleKeysFiltered
        else:
            print("cant get style keys for {}".format(fileType))
    return lexerBracketIgnoreStyles

def find_scilexer():
    cmd = "pkg-config --cflags geany | tr ' ' '\n' | grep scintilla"
    scintDir = subprocess.check_output(
        cmd, shell=True
    ).decode('utf-8').replace("-I", "").strip()
    return os.path.join(scintDir, "SciLexer.h")

def main(args):
    """ cli """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="generate styles mapping"
    )

    parser.add_argument(
        '--sci_lexer',
        type=str,
        help="Path to SciLexer.h",
        default=find_scilexer()
    )

    parser.add_argument(
        '--out_file',
        type=str,
        help="file to write mapping header to",
        default="bracketcolors-ignore-styles.h"
    )

    parser.add_argument(
        '--filters',
        help="tags to filter out",
        nargs='+',
        default=[
            "DEFAULT",
            "IDENTIFIER",
            "OPERATOR"
        ]
    )

    args = parser.parse_args()

    if (not os.path.isfile(args.sci_lexer)):
        print("Does not exist: {}".format(args.sci_lexer))
        sys.exit(1)

    macros = parse_file(args.sci_lexer)
    lexerBracketIgnoreStyles = make_style_mapping(macros, args.filters)

    headerStr = make_header_str(lexerBracketIgnoreStyles)
    with open(args.out_file, 'w') as f:
        f.write(headerStr)

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))